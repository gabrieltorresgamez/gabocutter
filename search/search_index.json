{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This modern Cookiecutter template is designed to kickstart Python projects with all essential tools for development and testing. Tailored for data science use cases, it offers the following features:</p> <ul> <li>uv for dependency management</li> <li>CI/CD with GitHub Actions</li> <li>Code quality with ruff</li> <li>Testing and coverage with pytest</li> <li>Documentation with MkDocs</li> </ul> <p>An example of a repository generated with this package can be found here.</p>"},{"location":"#quickstart","title":"Quickstart","text":"<p>On your local machine, navigate to the directory in which you want to create a project directory, and run the following command:</p> <pre><code>uvx cookiecutter https://github.com/gabrieltorresgamez/gabocutter.git\n</code></pre> <p>or if you don't have <code>uv</code> installed yet:</p> <pre><code>pip install cookiecutter\ncookiecutter https://github.com/gabrieltorresgamez/gabocutter.git\n</code></pre> <p>Follow the prompts to configure your project. Once completed, a new directory containing your project will be created. Then navigate into your newly created project directory and follow the instructions under https://gabrieltorresgamez.github.io/gabocutter/tutorial/ to complete the setup of your project.</p>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>This project is based on Florian Maas's cookiecutter-uv repository \u2764\ufe0f. It has been simplified and adjusted to my personal preferences.</p>"},{"location":"prompt_arguments/","title":"Prompt arguments","text":"<p>When running the command <code>ccp</code> a prompt will start which enables you to configure your repository. The prompt values and their explanation are as follows:</p> <p>author</p> <p>Your full name.</p> <p>email</p> <p>Your email address.</p> <p>author_github_handle</p> <p>Your github handle, i.e. <code>&lt;handle&gt;</code> in <code>https://github.com/&lt;handle&gt;</code></p> <p>project_name</p> <p>Your project name. Should be equal to the name of your repository and it should only contain alphanumeric characters and <code>-</code>'s.</p> <p>project_slug</p> <p>The project slug, will default to the <code>project_name</code> with all <code>-</code>'s replaced with <code>_</code>. This will be how you import your code later, e.g.</p> <pre><code>from &lt;project_slug&gt; import foo\n</code></pre> <p>project_description</p> <p>A short description of your project.</p>"},{"location":"tutorial/","title":"Tutorial","text":"<p>This page contains a complete tutorial on how to create your project.</p>"},{"location":"tutorial/#step-1-install-uv","title":"Step 1: Install uv","text":"<p>To start, we will need to install <code>uv</code>. The instructions to install uv can be found here. For MacOS or Linux;</p> <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre>"},{"location":"tutorial/#step-2-generate-your-project","title":"Step 2: Generate your project","text":"<p>On your local machine, navigate to the directory in which you want to create a project directory, and run the following command:</p> <pre><code>uvx cookiecutter https://github.com/gabrieltorresgamez/gabocutter.git\n</code></pre> <p>For an explanation of the prompt arguments, see Prompt Arguments.</p>"},{"location":"tutorial/#step-3-set-up-your-github-repository","title":"Step 3: Set up your Github repository","text":"<p>Create an empty new repository on Github. Give it a name that only contains alphanumeric characters and optionally <code>-</code>. DO NOT check any boxes under the option <code>Initialize this repository with</code>.</p>"},{"location":"tutorial/#step-4-upload-your-project-to-github","title":"Step 4: Upload your project to Github","text":"<p>Run the following commands, replacing <code>&lt;project-name&gt;</code> with the name that you also gave the Github repository and <code>&lt;github_author_handle&gt;</code> with your Github username.</p> <pre><code>cd &lt;project_name&gt;\ngit init -b main\ngit add .\ngit commit -m \"Init commit\"\ngit remote add origin git@github.com:&lt;github_author_handle&gt;/&lt;project_name&gt;.git\ngit push -u origin main\n</code></pre>"},{"location":"tutorial/#step-5-set-up-your-development-environment","title":"Step 5: Set Up Your Development Environment","text":"<p>Initially, the CI/CD pipeline will fail for this reason:</p> <ul> <li>The project does not yet contain a <code>uv.lock</code> file</li> </ul> <p>To fix that, we first install the environment with:</p> <pre><code>make install\n</code></pre> <p>This will generate the <code>uv.lock</code> file. You should commit and push this file.</p>"},{"location":"tutorial/#step-6-enable-your-documentation","title":"Step 6: Enable your documentation","text":"<p>To enable your documentation on GitHub, first navigate to <code>Settings &gt; Actions &gt; General</code> in your repository, and under <code>Workflow permissions</code> select <code>Read and write permissions</code>.</p>"},{"location":"tutorial/#step-7-enable-your-documentation-ctd","title":"Step 7: Enable your documentation ct'd","text":"<p>Then navigate to <code>Settings &gt; Code and Automation &gt; Pages</code>.  You should see a notification saying <code>Your site is ready to be published at https://&lt;author_github_handle&gt;.github.io/&lt;project_name&gt;/</code>.</p> <p>To finalize deploying your documentation, under <code>Source</code>, select the branch <code>gh-pages</code>.</p>"},{"location":"tutorial/#step-8-youre-all-set","title":"Step 8: You're all set!","text":"<p>That's it! I hope this repository saved you a lot of manual configuration. If you have any improvement suggestions, feel free to raise an issue or open a PR on Github!</p>"},{"location":"features/docker/","title":"Containerization with Docker","text":"<p>A simple <code>Dockerfile</code> is added to the repository. The Dockerfile  installs uv, sets up the environment and runs <code>foo.py</code> when run.</p> <p>The docker image can be built with</p> <pre><code>docker build . -t my-docker-image\n</code></pre> <p>It can then be run in the background with</p> <pre><code>docker run -d my-docker-image\n</code></pre> <p>Or, run it interactive mode with</p> <pre><code>docker run --rm -it --entrypoint bash my-docker-image\n</code></pre>"},{"location":"features/linting/","title":"Linting and code quality","text":"<p>Code can be checked with the command</p> <pre><code>make check\n</code></pre> <p>This command will run the following tools:</p>"},{"location":"features/linting/#ruff","title":"ruff","text":"<p>ruff is used to lint and format the code, and it is configured through <code>pyproject.toml</code>:</p> <pre><code>[tool.ruff]\ntarget-version = \"py39\"\nline-length = 120\nfix = true\nselect = [\n    # flake8-2020\n    \"YTT\",\n    # flake8-bandit\n    \"S\",\n    # flake8-bugbear\n    \"B\",\n    # flake8-builtins\n    \"A\",\n    # flake8-comprehensions\n    \"C4\",\n    # flake8-debugger\n    \"T10\",\n    # flake8-simplify\n    \"SIM\",\n    # isort\n    \"I\",\n    # mccabe\n    \"C90\",\n    # pycodestyle\n    \"E\", \"W\",\n    # pyflakes\n    \"F\",\n    # pygrep-hooks\n    \"PGH\",\n    # pyupgrade\n    \"UP\",\n    # ruff\n    \"RUF\",\n    # tryceratops\n    \"TRY\",\n]\nignore = [\n    # LineTooLong\n    \"E501\",\n    # DoNotAssignLambda\n    \"E731\",\n]\n\n[tool.ruff.format]\npreview = true\n\n[tool.ruff.per-file-ignores]\n\"tests/*\" = [\"S101\"]\n</code></pre>"},{"location":"features/makefile/","title":"Makefile","text":"<p>The generated repository will have a <code>Makefile</code> available. A list of all available commands that are available can be obtained by running <code>make help</code> in the terminal. Initially, if all features are selected, the following commands are available:</p> <pre><code>install              Install the uv environment\ncheck                Lint code by running ruff\ntest                 Test the code with pytest\nbuild                Build wheel file using uv\nclean-build          clean build artifacts\ndocs-test            Test if documentation can be built without warnings or errors\ndocs                 Build and serve the documentation\n</code></pre>"},{"location":"features/mkdocs/","title":"Documentation with MkDocs","text":"<p>To view the documentation locally, simply run</p> <pre><code>make docs\n</code></pre> <p>This command will generate and build your documentation, and start the server locally so you can access it at http://localhost:8000.</p>"},{"location":"features/mkdocs/#enabling-the-documentation-on-github","title":"Enabling the documentation on GitHub","text":"<p>To enable your documentation on GitHub, first navigate to <code>Settings &gt; Actions &gt; General</code> in your repository, and under <code>Workflow permissions</code> select <code>Read and write permissions</code></p> <p>Then, in your repository, navigate to <code>Settings &gt; Code and Automation &gt; Pages</code>. You should see a notification saying <code>Your site is ready to be published at https://&lt;author_github_handle&gt;.github.io/&lt;project_name&gt;/</code>.</p> <p>To finalize deploying your documentation, under <code>Source</code>, select the branch <code>gh-pages</code>. Your documentation should then be live within a few minutes.</p>"},{"location":"features/mkdocs/#documenting-docstrings","title":"Documenting docstrings","text":"<p>The generated project also converts all your docstrings into legible documentation. By default, the project is configured to work with google style docstrings.</p> <p>An example of a Google style docstring:</p> <pre><code>def function_with_pep484_type_annotations(param1: int, param2: str) -&gt; bool:\n\"\"\"Example function with PEP 484 type annotations.\n\nArgs:\n    param1: The first parameter.\n    param2: The second parameter.\n\nReturns:\n    The return value. True for success, False otherwise.\n</code></pre> <p>For more examples, see here.</p>"},{"location":"features/pytest/","title":"Unittesting with Pytest","text":"<p>pytest is automatically added to the environment. There will be a template unittest in the <code>tests</code> directory upon creation of the project, which can be run with</p> <pre><code>make test\n</code></pre>"},{"location":"features/uv/","title":"Dependency management with uv","text":"<p>The generated repository will uses uv for its dependency management. When you have created your repository using this cookiecutter template, a uv environment is pre-configured in <code>pyproject.toml</code>. All you need to do is add your project-specific dependencies with</p> <pre><code>uv add &lt;package&gt;\n</code></pre> <p>and then install the environment with</p> <pre><code>uv sync\n</code></pre> <p>You can then run commands within your virtual environment, for example:</p> <pre><code>uv run python -m pytest\n</code></pre>"}]}